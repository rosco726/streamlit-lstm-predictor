import streamlit as st
import os
import numpy as np
import pickle
from collections import deque
from sklearn.linear_model import SGDRegressor

st.set_page_config(page_title="Pr√©dicteur de valeurs", layout="centered")
st.title("üî¢ Pr√©dicteur de valeurs (√† 2 d√©cimales)")

st.subheader("üìÅ Choisir ou cr√©er un projet")
projects_dir = "projets"
os.makedirs(projects_dir, exist_ok=True)

projets = [f.replace(".pkl", "") for f in os.listdir(projects_dir) if f.endswith(".pkl")]
choix_projet = st.selectbox("S√©lectionner un projet existant", [""] + projets)
nouveau_projet = st.text_input("Ou cr√©er un nouveau projet")

projet = nouveau_projet if nouveau_projet else choix_projet
modele_path = os.path.join(projects_dir, f"{projet}.pkl") if projet else None

if not projet:
    st.warning("Veuillez s√©lectionner ou cr√©er un projet pour continuer.")
    st.stop()

if os.path.exists(modele_path):
    with open(modele_path, "rb") as f:
        modele, historique = pickle.load(f)
else:
    modele = SGDRegressor(max_iter=1000, tol=1e-3)
    historique = deque(maxlen=30)

st.subheader(f"üî¢ Pr√©diction pour le projet : `{projet}`")

if len(historique) < 30:
    val = st.number_input(f"Entrez la valeur {len(historique)+1}/30", format="%.2f")
    if st.button("Ajouter cette valeur"):
        historique.append(val)
        st.experimental_rerun()
else:
    entree = np.array(historique).reshape(1, -1)
    prediction = modele.predict(entree)[0]
    st.success(f"‚úÖ Prochaine valeur pr√©dite : **{prediction:.2f}**")

    nouvelle_val = st.number_input("Entrez la vraie valeur obtenue", format="%.2f")
    if st.button("Apprendre cette valeur r√©elle"):
        modele.partial_fit(entree, [nouvelle_val])
        historique.append(nouvelle_val)
        st.success("‚úîÔ∏è Valeur ajout√©e et mod√®le mis √† jour")
        st.experimental_rerun()

if st.button("üíæ Sauvegarder le mod√®le actuel"):
    with open(modele_path, "wb") as f:
        pickle.dump((modele, historique), f)
    st.success(f"üß† Mod√®le sauvegard√© dans `{modele_path}`")

if historique:
    st.markdown("### üìú Historique des derni√®res valeurs")
    st.write([round(x, 2) for x in list(historique)])